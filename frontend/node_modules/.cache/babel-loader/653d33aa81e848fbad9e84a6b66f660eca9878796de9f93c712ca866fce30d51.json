{"ast":null,"code":"// Kiosk configuration\nconst KIOSK_CONFIG={// Get kiosk ID from environment variable, URL parameter, or localStorage\nkioskId:(()=>{// Check URL parameter first\nconst urlParams=new URLSearchParams(window.location.search);const urlKiosk=urlParams.get('kiosk');if(urlKiosk){localStorage.setItem('kioskId',urlKiosk);return urlKiosk;}// Check environment variable\nif(process.env.REACT_APP_KIOSK_ID){return process.env.REACT_APP_KIOSK_ID;}// Check localStorage\nconst stored=localStorage.getItem('kioskId');if(stored)return stored;// Default\nreturn'kiosk-1';})(),// Kiosk-specific settings\nsettings:{'kiosk-1':{name:'Entrance Booth',timeout:120000,location:'Main Entrance'},'kiosk-2':{name:'Center Booth',timeout:120000,location:'Event Center'},'kiosk-3':{name:'VIP Booth',timeout:180000,location:'VIP Area'},'kiosk-4':{name:'Exit Booth',timeout:120000,location:'Main Exit'}},// Auto-reset after inactivity (1 minute)\ninactivityTimeout:60000,// Prevent right-click\ndisableContextMenu:true,// Full screen mode\nautoFullscreen:true,// Debug mode (shows kiosk info)\ndebug:process.env.NODE_ENV==='development'};// Apply kiosk settings\nif(KIOSK_CONFIG.disableContextMenu){document.addEventListener('contextmenu',e=>e.preventDefault());}// Request fullscreen on first interaction\nif(KIOSK_CONFIG.autoFullscreen){document.addEventListener('click',()=>{if(!document.fullscreenElement&&document.documentElement.requestFullscreen){document.documentElement.requestFullscreen().catch(err=>{console.log('Fullscreen request failed:',err);});}},{once:true});}export default KIOSK_CONFIG;","map":{"version":3,"names":["KIOSK_CONFIG","kioskId","urlParams","URLSearchParams","window","location","search","urlKiosk","get","localStorage","setItem","process","env","REACT_APP_KIOSK_ID","stored","getItem","settings","name","timeout","inactivityTimeout","disableContextMenu","autoFullscreen","debug","NODE_ENV","document","addEventListener","e","preventDefault","fullscreenElement","documentElement","requestFullscreen","catch","err","console","log","once"],"sources":["/Users/nishantfernandez/Desktop/NodeProjects/marathon-photobooth/frontend/src/config/kiosk.js"],"sourcesContent":["// Kiosk configuration\nconst KIOSK_CONFIG = {\n  // Get kiosk ID from environment variable, URL parameter, or localStorage\n  kioskId: (() => {\n    // Check URL parameter first\n    const urlParams = new URLSearchParams(window.location.search);\n    const urlKiosk = urlParams.get('kiosk');\n    if (urlKiosk) {\n      localStorage.setItem('kioskId', urlKiosk);\n      return urlKiosk;\n    }\n    \n    // Check environment variable\n    if (process.env.REACT_APP_KIOSK_ID) {\n      return process.env.REACT_APP_KIOSK_ID;\n    }\n    \n    // Check localStorage\n    const stored = localStorage.getItem('kioskId');\n    if (stored) return stored;\n    \n    // Default\n    return 'kiosk-1';\n  })(),\n  \n  // Kiosk-specific settings\n  settings: {\n    'kiosk-1': { \n      name: 'Entrance Booth', \n      timeout: 120000,\n      location: 'Main Entrance'\n    },\n    'kiosk-2': { \n      name: 'Center Booth', \n      timeout: 120000,\n      location: 'Event Center'\n    },\n    'kiosk-3': { \n      name: 'VIP Booth', \n      timeout: 180000,\n      location: 'VIP Area'\n    },\n    'kiosk-4': { \n      name: 'Exit Booth', \n      timeout: 120000,\n      location: 'Main Exit'\n    }\n  },\n  \n  // Auto-reset after inactivity (1 minute)\n  inactivityTimeout: 60000,\n  \n  // Prevent right-click\n  disableContextMenu: true,\n  \n  // Full screen mode\n  autoFullscreen: true,\n  \n  // Debug mode (shows kiosk info)\n  debug: process.env.NODE_ENV === 'development'\n};\n\n// Apply kiosk settings\nif (KIOSK_CONFIG.disableContextMenu) {\n  document.addEventListener('contextmenu', e => e.preventDefault());\n}\n\n// Request fullscreen on first interaction\nif (KIOSK_CONFIG.autoFullscreen) {\n  document.addEventListener('click', () => {\n    if (!document.fullscreenElement && document.documentElement.requestFullscreen) {\n      document.documentElement.requestFullscreen().catch(err => {\n        console.log('Fullscreen request failed:', err);\n      });\n    }\n  }, { once: true });\n}\n\nexport default KIOSK_CONFIG;"],"mappings":"AAAA;AACA,KAAM,CAAAA,YAAY,CAAG,CACnB;AACAC,OAAO,CAAE,CAAC,IAAM,CACd;AACA,KAAM,CAAAC,SAAS,CAAG,GAAI,CAAAC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAC7D,KAAM,CAAAC,QAAQ,CAAGL,SAAS,CAACM,GAAG,CAAC,OAAO,CAAC,CACvC,GAAID,QAAQ,CAAE,CACZE,YAAY,CAACC,OAAO,CAAC,SAAS,CAAEH,QAAQ,CAAC,CACzC,MAAO,CAAAA,QAAQ,CACjB,CAEA;AACA,GAAII,OAAO,CAACC,GAAG,CAACC,kBAAkB,CAAE,CAClC,MAAO,CAAAF,OAAO,CAACC,GAAG,CAACC,kBAAkB,CACvC,CAEA;AACA,KAAM,CAAAC,MAAM,CAAGL,YAAY,CAACM,OAAO,CAAC,SAAS,CAAC,CAC9C,GAAID,MAAM,CAAE,MAAO,CAAAA,MAAM,CAEzB;AACA,MAAO,SAAS,CAClB,CAAC,EAAE,CAAC,CAEJ;AACAE,QAAQ,CAAE,CACR,SAAS,CAAE,CACTC,IAAI,CAAE,gBAAgB,CACtBC,OAAO,CAAE,MAAM,CACfb,QAAQ,CAAE,eACZ,CAAC,CACD,SAAS,CAAE,CACTY,IAAI,CAAE,cAAc,CACpBC,OAAO,CAAE,MAAM,CACfb,QAAQ,CAAE,cACZ,CAAC,CACD,SAAS,CAAE,CACTY,IAAI,CAAE,WAAW,CACjBC,OAAO,CAAE,MAAM,CACfb,QAAQ,CAAE,UACZ,CAAC,CACD,SAAS,CAAE,CACTY,IAAI,CAAE,YAAY,CAClBC,OAAO,CAAE,MAAM,CACfb,QAAQ,CAAE,WACZ,CACF,CAAC,CAED;AACAc,iBAAiB,CAAE,KAAK,CAExB;AACAC,kBAAkB,CAAE,IAAI,CAExB;AACAC,cAAc,CAAE,IAAI,CAEpB;AACAC,KAAK,CAAEX,OAAO,CAACC,GAAG,CAACW,QAAQ,GAAK,aAClC,CAAC,CAED;AACA,GAAIvB,YAAY,CAACoB,kBAAkB,CAAE,CACnCI,QAAQ,CAACC,gBAAgB,CAAC,aAAa,CAAEC,CAAC,EAAIA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CACnE,CAEA;AACA,GAAI3B,YAAY,CAACqB,cAAc,CAAE,CAC/BG,QAAQ,CAACC,gBAAgB,CAAC,OAAO,CAAE,IAAM,CACvC,GAAI,CAACD,QAAQ,CAACI,iBAAiB,EAAIJ,QAAQ,CAACK,eAAe,CAACC,iBAAiB,CAAE,CAC7EN,QAAQ,CAACK,eAAe,CAACC,iBAAiB,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,EAAI,CACxDC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAEF,GAAG,CAAC,CAChD,CAAC,CAAC,CACJ,CACF,CAAC,CAAE,CAAEG,IAAI,CAAE,IAAK,CAAC,CAAC,CACpB,CAEA,cAAe,CAAAnC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}