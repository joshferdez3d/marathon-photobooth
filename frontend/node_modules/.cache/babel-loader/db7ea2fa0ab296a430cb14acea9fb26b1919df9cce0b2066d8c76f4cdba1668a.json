{"ast":null,"code":"// Kiosk configuration\nconst KIOSK_CONFIG = {\n  // Get kiosk ID from environment variable, URL parameter, or localStorage\n  kioskId: (() => {\n    // Check URL parameter first\n    const urlParams = new URLSearchParams(window.location.search);\n    const urlKiosk = urlParams.get('kiosk');\n    if (urlKiosk) {\n      localStorage.setItem('kioskId', urlKiosk);\n      return urlKiosk;\n    }\n\n    // Check environment variable\n    if (process.env.REACT_APP_KIOSK_ID) {\n      return process.env.REACT_APP_KIOSK_ID;\n    }\n\n    // Check localStorage\n    const stored = localStorage.getItem('kioskId');\n    if (stored) return stored;\n\n    // Default\n    return 'kiosk-1';\n  })(),\n  // Kiosk-specific settings\n  settings: {\n    'kiosk-1': {\n      name: 'Entrance Booth',\n      timeout: 120000,\n      location: 'Main Entrance'\n    },\n    'kiosk-2': {\n      name: 'Center Booth',\n      timeout: 120000,\n      location: 'Event Center'\n    },\n    'kiosk-3': {\n      name: 'VIP Booth',\n      timeout: 180000,\n      location: 'VIP Area'\n    },\n    'kiosk-4': {\n      name: 'Exit Booth',\n      timeout: 120000,\n      location: 'Main Exit'\n    }\n  },\n  // Auto-reset after inactivity (1 minute)\n  inactivityTimeout: 60000,\n  // Prevent right-click\n  disableContextMenu: true,\n  // Full screen mode\n  autoFullscreen: true,\n  // Debug mode (shows kiosk info)\n  debug: process.env.NODE_ENV === 'development'\n};\n\n// Apply kiosk settings\nif (KIOSK_CONFIG.disableContextMenu) {\n  document.addEventListener('contextmenu', e => e.preventDefault());\n}\n\n// Request fullscreen on first interaction\nif (KIOSK_CONFIG.autoFullscreen) {\n  document.addEventListener('click', () => {\n    if (!document.fullscreenElement && document.documentElement.requestFullscreen) {\n      document.documentElement.requestFullscreen().catch(err => {\n        console.log('Fullscreen request failed:', err);\n      });\n    }\n  }, {\n    once: true\n  });\n}\nexport default KIOSK_CONFIG;","map":{"version":3,"names":["KIOSK_CONFIG","kioskId","urlParams","URLSearchParams","window","location","search","urlKiosk","get","localStorage","setItem","process","env","REACT_APP_KIOSK_ID","stored","getItem","settings","name","timeout","inactivityTimeout","disableContextMenu","autoFullscreen","debug","NODE_ENV","document","addEventListener","e","preventDefault","fullscreenElement","documentElement","requestFullscreen","catch","err","console","log","once"],"sources":["/Users/nishantfernandez/Desktop/NodeProjects/marathon-photobooth/frontend/src/config/kiosk.js"],"sourcesContent":["// Kiosk configuration\nconst KIOSK_CONFIG = {\n  // Get kiosk ID from environment variable, URL parameter, or localStorage\n  kioskId: (() => {\n    // Check URL parameter first\n    const urlParams = new URLSearchParams(window.location.search);\n    const urlKiosk = urlParams.get('kiosk');\n    if (urlKiosk) {\n      localStorage.setItem('kioskId', urlKiosk);\n      return urlKiosk;\n    }\n    \n    // Check environment variable\n    if (process.env.REACT_APP_KIOSK_ID) {\n      return process.env.REACT_APP_KIOSK_ID;\n    }\n    \n    // Check localStorage\n    const stored = localStorage.getItem('kioskId');\n    if (stored) return stored;\n    \n    // Default\n    return 'kiosk-1';\n  })(),\n  \n  // Kiosk-specific settings\n  settings: {\n    'kiosk-1': { \n      name: 'Entrance Booth', \n      timeout: 120000,\n      location: 'Main Entrance'\n    },\n    'kiosk-2': { \n      name: 'Center Booth', \n      timeout: 120000,\n      location: 'Event Center'\n    },\n    'kiosk-3': { \n      name: 'VIP Booth', \n      timeout: 180000,\n      location: 'VIP Area'\n    },\n    'kiosk-4': { \n      name: 'Exit Booth', \n      timeout: 120000,\n      location: 'Main Exit'\n    }\n  },\n  \n  // Auto-reset after inactivity (1 minute)\n  inactivityTimeout: 60000,\n  \n  // Prevent right-click\n  disableContextMenu: true,\n  \n  // Full screen mode\n  autoFullscreen: true,\n  \n  // Debug mode (shows kiosk info)\n  debug: process.env.NODE_ENV === 'development'\n};\n\n// Apply kiosk settings\nif (KIOSK_CONFIG.disableContextMenu) {\n  document.addEventListener('contextmenu', e => e.preventDefault());\n}\n\n// Request fullscreen on first interaction\nif (KIOSK_CONFIG.autoFullscreen) {\n  document.addEventListener('click', () => {\n    if (!document.fullscreenElement && document.documentElement.requestFullscreen) {\n      document.documentElement.requestFullscreen().catch(err => {\n        console.log('Fullscreen request failed:', err);\n      });\n    }\n  }, { once: true });\n}\n\nexport default KIOSK_CONFIG;"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG;EACnB;EACAC,OAAO,EAAE,CAAC,MAAM;IACd;IACA,MAAMC,SAAS,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;IAC7D,MAAMC,QAAQ,GAAGL,SAAS,CAACM,GAAG,CAAC,OAAO,CAAC;IACvC,IAAID,QAAQ,EAAE;MACZE,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEH,QAAQ,CAAC;MACzC,OAAOA,QAAQ;IACjB;;IAEA;IACA,IAAII,OAAO,CAACC,GAAG,CAACC,kBAAkB,EAAE;MAClC,OAAOF,OAAO,CAACC,GAAG,CAACC,kBAAkB;IACvC;;IAEA;IACA,MAAMC,MAAM,GAAGL,YAAY,CAACM,OAAO,CAAC,SAAS,CAAC;IAC9C,IAAID,MAAM,EAAE,OAAOA,MAAM;;IAEzB;IACA,OAAO,SAAS;EAClB,CAAC,EAAE,CAAC;EAEJ;EACAE,QAAQ,EAAE;IACR,SAAS,EAAE;MACTC,IAAI,EAAE,gBAAgB;MACtBC,OAAO,EAAE,MAAM;MACfb,QAAQ,EAAE;IACZ,CAAC;IACD,SAAS,EAAE;MACTY,IAAI,EAAE,cAAc;MACpBC,OAAO,EAAE,MAAM;MACfb,QAAQ,EAAE;IACZ,CAAC;IACD,SAAS,EAAE;MACTY,IAAI,EAAE,WAAW;MACjBC,OAAO,EAAE,MAAM;MACfb,QAAQ,EAAE;IACZ,CAAC;IACD,SAAS,EAAE;MACTY,IAAI,EAAE,YAAY;MAClBC,OAAO,EAAE,MAAM;MACfb,QAAQ,EAAE;IACZ;EACF,CAAC;EAED;EACAc,iBAAiB,EAAE,KAAK;EAExB;EACAC,kBAAkB,EAAE,IAAI;EAExB;EACAC,cAAc,EAAE,IAAI;EAEpB;EACAC,KAAK,EAAEX,OAAO,CAACC,GAAG,CAACW,QAAQ,KAAK;AAClC,CAAC;;AAED;AACA,IAAIvB,YAAY,CAACoB,kBAAkB,EAAE;EACnCI,QAAQ,CAACC,gBAAgB,CAAC,aAAa,EAAEC,CAAC,IAAIA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC;AACnE;;AAEA;AACA,IAAI3B,YAAY,CAACqB,cAAc,EAAE;EAC/BG,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;IACvC,IAAI,CAACD,QAAQ,CAACI,iBAAiB,IAAIJ,QAAQ,CAACK,eAAe,CAACC,iBAAiB,EAAE;MAC7EN,QAAQ,CAACK,eAAe,CAACC,iBAAiB,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;QACxDC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEF,GAAG,CAAC;MAChD,CAAC,CAAC;IACJ;EACF,CAAC,EAAE;IAAEG,IAAI,EAAE;EAAK,CAAC,CAAC;AACpB;AAEA,eAAenC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}